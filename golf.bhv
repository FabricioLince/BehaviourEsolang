  
  tower = {1 2 3}
  
  istower = &![
    (#a < 3)
    (
      t=a
      (#a-2)*&(v=t%(a+1) [v>t%a; v>t%(a+2)])
    ) > &(a b)
  ]
  
  aistower = &[
    (
      i=1
      \~(
        [
          a%i > a%(i+1)
          a%i > a%(i-1)
        ]
        i += 1
        i < #a-1
      )
      i >= #a-1
    )
  ]
  
  istower = &![#a<3(t=a(#a-2)*&(v=t%(a+1)[v>t%a;v>t%(a+2)]))>&(a;b)]
  
  t=&(i=1\~([a%i>a%(i+1)a%i>a%(i-1)]i+=1i<#a-1)i>#a-2)
  
  correct = istower
  
  aistower = &(
    i=1 // start on the index 1
    // repeat the following sequence until failure
    \~( 
      // either the ith member is bigger than the previous or bigger than the next
      [ 
        a%i > a%(i+1)
        a%i > a%(i-1)
      ]
      // increment index and check if it still is less than n-1
      i += 1
      i < #a-1
    )
    // is a tower if the index stopped incrementing on the last possible index (i.e. passed all the checks)
    i > #a-2
  )
  
  istower = &{a>&a*(a-b) a>&a*(b-a)}
  
  test = &(
    @""+a + ": " + (istower:a) + " -> " + correct:a
   )
  
  test:{1}
  test:{1 2}
  test:{1 2 3}
  test:{1 3 2}
  test:{3 1 2}
  test:{2 1 3}
  test:{2 3 1}
  test:{1 2 3 4}
  test:{3 4 2 1}
  test:{4 3 1 2}
  test:{4 1 2 3}
  test:{3 4 1 5 2}
  test:{4 3 1 2 5}
  
$$

    
  createList = &
    [
      (~!a; {})
      (
        list = createList:a-1
        smallest = 0 
        \(
          ~(list <= smallest+=1)
          
          sum = list+smallest > &a+b
          
          ~!sum%a 
        )
        list + smallest
      )
    ]
  c=&[(a==1{1})(l=c:a-1s=0\(s+=1~(l<=s)p=[l>&a+b;0]+s;p%a==0)l+s)]f=&(!c)%-1
  c=&[(a==1{1})(l=c:a-1s=0\(s+=1~(l<=s)([l>&a+b;0]+s)%a==0)l+s)]f=&(!c)%-1
  c=&[(~!a{})(l=c:a-1s=0\(s+=1~(l<=s)([l>&a+b;0]+s)%a==0)l+s)]f=&(!c)%-1
  c=&[(~!a{})(l=c:a-1s=0\(s+=1~(l<=s)~!([l>&a+b;0]+s)%a)l+s)]f=&(!c)%-1
  c=&[(~!a{})(l=c:a-1s=0\(s+=1~(l<=s)~!(l+s>&a+b)%a)l+s)]f=&(!c)%-1
  c=&[(~!a{})(l=c:a-1s=0\(~(l<=s+=1)~!(l+s>&a+b)%a)l+s)]f=&(!c)%-1
  

@f:1
@f:2
@f:3
@f:10



$$


f=&[~m=0(-1|!(a*&["))("%a-1;0])>&&(m=[a|a>m;m]a+b))m]

@f:"1+(3*5)+((5)-1+1)"
@f:"1+((3*5)+((5)-1+1)"
@f:"((())())"


$$  
    

f=&#((a*&(pow:10,#(""+a))-1-a)>&a+b)
f=&#(a*&pow:10,#(""+a);-1-a;>&a+b)
f=&#(a*&10^#(""+a)-1-a;>&a+b)
//f=&#(a*&10^#(""+a)-1-a;>+)


f=&
  #(                  // deal with 0 case, convert nil into 0
    a * &             // generate array for n nine complements
      10^#(""+a)-1-a; // nine complements logic
    >&a+b             // reduce array by adding its items
  )

@f:0
@f:1
@f:10
@f:100
@f:1000

$$


  ds = &(i=0\~(c=a%i@c+c i+=1))
  ds = &(i=0\~(a%i@a%i*2i+=1))
  ds = &(s=a#s*&@s%a*2)
  ds = &(a*&a*2)>&a+b

  ds:"Hello World!"
    
    

;$#


l= &(~a%4[a%100~a%400])
l= &([a%100a=a/100]~a%4)
l= &~[(a%25>0 a%4>0)a%16>0]

leap = l

@leap:1936
@leap:1805
@leap:1900
@leap:2272
@leap:2400
;

"https://codegolf.stackexchange.com/questions/109248/mathematics-is-fact-programming-is-not"

f = &(p=[a%"0"a%"1"]v=[(a%p=="1"1)0]?(#a>p+1v=1)?(p%2>0v=1-v)v)

f = &(v=0p=[a%"0"(v=1a%"1")]?(#a>p+1v=1)?(p%2>0v=1-v)v)

f = &(v=[(a%-1<"#"1)0]?([a%"0"~v=1a%"1"]%2>0v=1-v)v)
f = &(v=[(a%-1<"#"1)0][([a%"0"~v=1a%"1"]%2>0 1-v)v])

f:"!!!1"

@(f:"0")==0
@(f:"1")==1
@(f:"0!")==1
@(f:"1!")==1
@(f:"!0")==1
@(f:"!1")==0
@(f:"!0!")==0
@(f:"!1!")==0
@(f:"0!!")==1
@(f:"1!!")==1
@(f:"!!0")==0
@(f:"!!1")==1
@(f:"!0!!")==0
@(f:"!!!1")==0
@(f:"!!!0!!!!")==0
@(f:"!!!1!!!!")==0

;



pascal = &[(a==0{1})(l={1}n=1m=1\~(a>1n*=a/m a-=1m+=1l+=n)l+1)]

@pascal:0
@pascal:1
@pascal:2
@pascal:3
@pascal:4
@pascal:5
@pascal:6

"https://codegolf.stackexchange.com/questions/235366/is-it-a-row-of-pascals-triangle"
f = &(t=#a-1[(t==0{1})(l={1}n=1m=1\~(t>1n*=t/m t-=1m+=1l+=n)l+1)]==a)

@f:{1}
@f:{1 2 1}
@f:{1 3 3 1}
@f:{1 7 21 35 35 21 7 1}
@f:{2}
@f:{1 2}
@f:{1 1 2}
@f:{1 2 10 2 1}

;


"https://codegolf.stackexchange.com/questions/185872/dad-jokes-are-fun"
f=&"Hi"+a/(3-#a)+", I'm bhv!"

f:"I'm tired"
;;


"https://codegolf.stackexchange.com/questions/235345/english-an-or-a"
f=&[("aeiouAEIOU"%(a%0)"an")"a"]

@f:"airplane"
@f:"water"
@f:"igloo"

;


// https://codegolf.stackexchange.com/questions/245813/play-caesars-cipher-with-letters-only
zs=32
zA=65
zZ=90
za=97
zz=122
invalid = &[
  (a<32)
  (a>32 a<65)
  (a>90 a<97)
  (a>122)
]
valid = &[
  (a==32)
  (a>64a<91)
  (a>96a<123)
]
cypher = &(
  str = a
  off = b
  code = str*&(
    asc = off+ascii:a
  )
)
uncypher = &(
  127*&(  // do the following sequence 127 times
    off = a  // get offset from iterator
    s = c*&(off+a)%128  // rotate each character from /c by the offset
    ~(s<~&[  // stop sequence if the previous result has any invalid character
      (a==32)
      (a>64 a<91)
      (a>96 a<123)
    ])
    @(s*ascii)>&a+b // convert ascii num to char, reduce to string and print
  )
)


//u=&(c=a;127*&(f=a;s=c*&(f+a)%127~(s<~&[a==32(a>64a<91)(a>96a<123)])(s*ascii)>&a+b))*&(a@a)
//u=&(c=a;127*&(f=a;s=c*&(f+a)%127~(s<~&[a==32(a>64a<91)(a>96a<123)])s*ascii>&a+b))*&(a@a)
u=&(127*&(f=a;s=c*&(f+a)%127~(s<~&[a==32(a>64a<91)(a>96a<123)])s*ascii>&a+b))*&[a]
u=&(127*&(f=a;s=c*&(f+a)%127~(s<~&[a==32(a>64a<91)(a>96a<123)])@s*ascii>&a+b))

//@cypher:"Lince",0
//@cypher:"Lince",4
//pos=uncypher:{80 109 114 103 105}
?u:c={43 35 49 49 31 37 35}
//?u:c={91 111 112 122 39 112 122 39 104 39 123 108 122 123 39 116 108 122 122 104 110 108}
