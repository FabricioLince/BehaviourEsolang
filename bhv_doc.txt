



// positional arguments populate the variables 'a', 'b', 'c', 'd' and 'e' respectively
!behaviour:1,2,3
!behaviour:a=1,b=2,c=3



Operators:


NUMBER + NUMBER = NUMBER --> adds lhs and rhs
LIST + _ = LIST --> appends rhs to lhs
STRING + _ = STRING --> concats lhs and the string rep of rhs
_ + STRING = STRING --> concats the string rep of lhs and rhs
_ + _ = NIL --> invalid 

NUMBER - NUMBER = NUMBER --> subtracts rhs from lhs
STRING - NUMBER = STRING --> remove the character in the rhs position from lhs
STRING - STRING = STRING --> remove the first occurrence of rhs from lhs
LIST - NUMBER = LIST --> remove the item in the rhs position from lhs
_ - _ = NIL --> invalid

NUMBER * NUMBER = NUMBER --> multiplies rhs and lhs
NUMBER * NODE = LIST --> executes rhs lhs times, an incremental argument is passed each time, evaluates to a list with all the results
BOOLEAN * -1 = BOOLEAN --> inverts the value of lhs
STRING * NUMBER = STRING --> repeats lhs rhs times iff rhs is >= 0
STRING * NODE = LIST --> executes rhs for each character of lhs, passing said character as argument each time, evaluates to a list with all the results except when said result is NIL (so it can be used as a filter)
LIST * LIST = LIST --> concatenates lhs and rhs
LIST * NUMBER = LIST --> repeats lhs rhs times iff rhs is >= 0
LIST * NODE = LIST  --> executes rhs for each item of lhs, passing said item as argument each time, evaluates to a list with all the results except when said result is NIL (so it can be used as a filter)
_ * _ = NIL --> invalid

NUMBER / NUMBER = NUMBER --> divides rhs by lhs
LIST / NUMBER = LIST --> clips lhs to a list with atmost rhs items, if rhs > 0 gets the first rhs items, if rhs < 0 gets the last rhs items
STRING / NUMBER = STRING --> clips lhs to a string with atmost rhs characters, if rhs > 0 gets the first rhs characters, if rhs < 0 gets the last rhs characters
STRING / STRING = LIST --> splits lhs by rhs, evaluates to a list with resulting items
STRING / NODE = LIST --> splits lhs using rhs as divisor, evaluates to a list with resulting items
_ / _ = NIL --> invalid

NUMBER % NUMBER = NUMBER --> rhs modulo lhs, both are cast to integers
STRING % NUMBER = STRING or NIL --> gets the character in the rhs position from lhs
STRING % STRING = NUMBER or NIL --> finds the rhs position within lhs, nil if rhs isn't a substring of lhs
LIST % NUMBER = _ --> gets the item in the rhs position from lhs
_ % _ = NIL --> invalid

NUMBER ^ NUMBER = NUMBER --> elevates lhs to the power of rhs
_ ^ _ = _ --> just returns lhs

NUMBER < NUMBER = BOOLEAN --> compares the values of lhs ad rhs with <
STRING < STRING = BOOLEAN --> compares lhs and rhs lexicographically by <
LIST < NODE = NUMBER or NIL -> finds the index of the first item of lhs that returns truthy when passed to rhs
_ < _ = NIL --> invalid

NUMBER <= NUMBER = BOOLEAN --> compares the values of lhs ad rhs with <=
STRING <= STRING = BOOLEAN --> compares lhs and rhs lexicographically by <=
LIST <= _ = NUMBER or NIL -> finds the index of the first occurrence of rhs in lhs 
_ <= _ = NIL --> invalid

NUMBER > NUMBER = BOOLEAN --> compares the values of lhs ad rhs with >
STRING > STRING = BOOLEAN --> compares lhs and rhs lexicographically by >
LIST > NODE = _ --> reduce operator, NIL if lhs is empty, the first item of lhs if lhs only has one item, else loops through the list applying rhs with the result of the last iteration and the current item as arguments
_ < _ = NIL --> invalid

NUMBER >= NUMBER = BOOLEAN --> compares the values of lhs ad rhs with >=
STRING >= STRING = BOOLEAN --> compares lhs and rhs lexicographically by >=
_ >= _ = NIL --> invalid

NUMBER == NUMBER = BOOLEAN --> compares the values of lhs ad rhs with ==
BOOLEAN == BOOLEAN = BOOLEAN -> compares the values of lhs ad rhs with ==
STRING == STRING = BOOLEAN --> compares the values of lhs ad rhs with ==
LIST == LIST = BOOLEAN --> compares each value of lhs with the corresponding index of rhs with ==, true only if every index returns true
NODE == NODE = BOOLEAN --> compares the values of lhs ad rhs with ==
_ == _ = false

# NUMBER = NUMBER --> cast the number to integer
# BOOLEAN = NUMBER --> 1 if true else 0
# STRING = NUMBER --> length of the string (amount of characters)
# LIST = NUMBER --> length of the list (amount of items)
# _ = 0

~ BOOLEAN = BOOLEAN --> invert the boolean
~ NIL = true
~ _ = false

  
  expr :: if ';'
  if :: comp ?('|' comp)
  comp :: addition ?(compop addition)
  compop :: ['>=' '>' '<=' '<' '==' '~=']
  addition :: multiplication *(['+' '-'] multiplication)
  multiplication :: value *(['*' '/' '%' '^'] value)
  value :: [signedvalue list integer string cmd name]
  signedvalue :: ['-' '~' '#'] value
  list :: '{' *expr '}'
  
  cmd :: [print assign execute sequence select optional gettree repeat]
  print :: '@' ?'@' expr
  assign :: name ['=' '+=' '-=' '*=' '/=' '%='] expr
  execute :: [execname execexpr]
  execname :: ?'!' name args
  execexpr :: '!' expr ?args
  args :: ':' expr *(',' expr)
  sequence :: '(' *expr ')'
  sequence :: '[' *expr ']'
  optional :: '?' expr
  gettree :: '&' ?'&' expr
  repeat :: '\' expr
  
  main :: expr


() [] ! ? @ ~ & # % 
