  
  
  n1 = 10*&a
  
  n3 = 10*&a*2
  n2 = 10*&a+1
  ;
  hanoi = (
    ms = &"move "+from+ " to "+to
    move = &@@!ms
    
    hanoir = &[
      (n<1 {})
      
      (hanoir:n=n-1, from=from, helper=to, to=helper)
      * {!ms} *
      (hanoir:n=n-1, from=helper, helper=from, to=to)
      
    ]
    &&!hanoir
  )
  
  
  moves = hanoi:n=4,from="A", helper="B", to="C"
  @@"needs "+#moves+" moves"
  ;
  
  Queue = load:"lib/Queue.bhv"
  
  q = !Queue
  
  q:itens = {1 2 3}
  
  q:itens+=15
  
  q:push:12
  q:push:1337
  
  q2 = !Queue
  
  q2:push:10
  q2:push:20
  q2:push:30
  
  @@q2:itens
  
  @@q:itens
  
  
  \~(q:!peek @@q:!pop)
  
  @@q2:itens
  @@q:itens
  @@q:!peek
  
  ;
  
  
  
  
  load = (
    cload = load
    &&cload:"lib/"+a
  )
  
  list = load:"list.bhv"
  
  rand = (
    crand = rand
    &&(!crand)%[a 10]
  )
  numbers = list:sort:(n={} 15|#(n+=!rand:100) n)
  
  ;
  
  split = &(r={}\~(p=a%div r+=a/p a/=p+#div-#a)r+a)
  
  split:"Lince Lazuli was here",div=" "
  
  format = &(i=0 r="" \~(p=str%"_" r+=str/p+a%i i+=1 str/=p+1-#str) r)
  
  format:str="My name is _. I made _","Lince","bhv"
  ;
  
  f = &(p=a%" -> " "@@(f:'"+ a/p + "')==" + a/(p-#a+4) )
  
  f:"0 -> 0"
  f:"!!1 -> 1"
  
  ;
  
  
  
  
  expr :: comp
  comp :: addition ?(compop addition)
  compop :: ['>=' '>' '<=' '<' '==' '~=' '|']
  addition :: multiplication *(['+' '-'] multiplication)
  multiplication :: value *(['*' '/' '%'] value)
  value :: [signedvalue list integer string cmd name]
  signedvalue :: ['-' '~' '#'] value
  list :: '{' *expr '}'
  
  cmd :: [print assign execute sequence select optional gettree repeat]
  print :: '@' ?'@' expr
  assign :: name ['=' '+=' '-=' '*=' '/=' '%='] expr
  execute :: [execname execexpr]
  execname :: ?'!' name args
  execexpr :: '!' expr ?args
  args :: ':' expr *(',' expr)
  sequence :: '(' +expr ')'
  sequence :: '[' +expr ']'
  optional :: '?' expr
  gettree :: '&' ?'&' expr
  repeat :: '\' expr
  
  main :: expr
;


