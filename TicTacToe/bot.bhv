@"loading bot.bhv"
println = [println !(load:"lib/print.bhv"):println]
Array = [Array load:"lib/array.bhv"]
Board = [Board load:"board.bhv"]
Map = [Map load:"lib/map.bhv"]
list = [list load:"lib/list.bhv"]

bot = $${
  max = &[a|a>b b]
  sign = &[ a ?= 0 -> 0; &a>0 -> 1; -1 ]

  hash = &(
    v=9*&(
      (1+slots:a)*(3^a)
    )
    v=v>&a+b
    v+(1+token)*59049 //(3^10)
  )

  emptySlots = Board:calcEmptySlots
  winner = Board:calcWinner

  scorePossibleMoves = &(
    (emptySlots:board:v)*&(
      pos = a
      tempBoard = !Array
      tempBoard:v = board:v
      tempBoard:set:pos,token
      scoreBoard:board=tempBoard
    )
  )

  count = 0
  increase = &&(count+=1)
  tabs=0
  p = &@("  "*tabs)+a
  memo = !Map
  
  test = (
    0 1 2
    3 4 5
    6 7 8
    // reflect X
    2 1 0
    5 4 3
    8 7 6
    // reflect Y
    6 7 8
    3 4 5
    0 1 2
    // rotate
    6 3 0
    7 4 1
    8 5 2
  )
  rotate = &{
    a:6 a:3 a:0
    a:7 a:4 a:1
    a:8 a:5 a:2
  }
  
  reflectX = &{
    a:2 a:1 a:0
    a:5 a:4 a:3
    a:8 a:7 a:6
  }
  reflectY = &{
    a:6 a:7 a:8
    a:3 a:4 a:5
    a:0 a:1 a:2
  }
  combs = list:comb:{0 1},3
  maxTries = #combs

  scoreBoard = &[
    (
      i = -1
      \10\(
        i += 1
        v1 = board:v
        ?(combs%i%0>0 v1 = rotate:v1)
        ?(combs%i%1>0 v1 = reflectX:v1)
        ?(combs%i%2>0 v1 = reflectY:v1)
        //b1:slots:v = v1
        //@""+(combs%i)+":"
        //println:b1
        key = hash:slots=v1
        memo:get:key
        //?@[dep+1 1]
      )
    )
    //~?(p:"calculating for "+(board:v)+" "+token+": "+(key) )
    //~?(p:"winner:"+(winner:board:v))
    (
      //?(?dep = [dep+1 1] @dep)
      m = [
        (winner:board:v) ?=
          token -> 10
          Board:oppositeFor:token -> -10
          Board:State:EMPTY -> 0
        (
          //p:"vazios: "+(emptySlots:board:v)
          //tabs+=1
          sc = !scorePossibleMoves:token=Board:oppositeFor:token
          //tabs-=1
          //p:sc
          sc = sc>max
          sc -= (sign:sc)*1
          (sc*-1)
        )
      ]
      ?memo:set:key,m
    )
  ]

  getMove = &(
    
    //@("getting move for " + board:v) + #(emptySlots:board:v)
    //@emptySlots:board:v
    
    #(emptySlots:board:v) ?=
      &a>6 -> (
        //@"too many options"
        moves = emptySlots:board:v
        [
          (4|moves<=4)
        
          \(
            move = moves%((!rand)%#moves)
            move%2==0
            move
          )
        ]
        //@"gonna play on " + move
      )
      &1 -> (
        scores = !scorePossibleMoves
        //@scores
        maxScore = scores>max
        
        moves = emptySlots:board:v
        moves = (0..#moves)*&(moves:a)|(scores:a)==maxScore
        moves = moves/&a
        move = moves%((!rand)%#moves)
      )
  )

}